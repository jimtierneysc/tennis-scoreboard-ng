var search_data = {"index":{"searchIndex":["apiconstraints","applicationcontroller","activerecord","authenticable","exceptions","applicationerror","invalidoperation","notfound","unknownoperation","match","matchloader","matchplay","completesetandmatch","nextserver","playactions","removelastchange","startnext","wingame","matchplayer","matchset","matchvalidation","validator","validatechangematch","player","setgame","team","user","v1","applicationarrayserializer","applicationserializer","matchscoreboardcontroller","exceptions","matchscoreboardserializer","matchserializer","matchsetserializer","matchescontroller","playerserializer","playerscontroller","sessionserializer","sessionscontroller","setgameserializer","teamserializer","teamscontroller","usercontroller","userserializer","actions()","attributes()","authorize_user!()","complete!()","completed?()","completed?()","compute_team_winner()","compute_team_winner()","convert_scores()","create()","create()","create()","create()","current_user()","destroy()","destroy()","destroy()","destroy()","eager_load_match()","first_player()","first_player()","first_player()","first_player=()","first_set()","first_team()","game()","game()","game?()","game?()","games()","generate_authentication_token!()","include_player?()","include_players?()","index()","index()","index()","last_game()","last_set()","lookup_method()","match_tiebreak()","match_tiebreak?()","match_tiebreak?()","matches?()","max_sets_to_play()","min_sets_to_play()","near_team_winner?()","near_team_winner?()","near_winners()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_game_ordinal()","opponent_id()","play()","play()","play_match!()","play_match?()","player()","remove_last()","rescue_record_not_found()","score_changed()","scoring_of_set()","second_player()","second_player()","second_player()","second_player=()","second_team()","server()","servers()","set?()","sets()","sets_won()","show()","show()","show()","show()","show()","singles_team()","singles_team!()","start_first_game()","start_play()","start_set_game()","state()","state()","state()","team_of_player()","tiebreak()","tiebreak()","tiebreak()","tiebreak?()","tiebreak?()","tiebreak?()","tiebreak?()","tiebreak_game?()","tiebreak_set?()","update()","update()","update()","update()","user_signed_in?()","valid_actions()","valid_actions()","validate()","validate()","validate()","win_threshold()","winner()","winner()","winner()","rspec_report.rake","sample_data.rake"],"longSearchIndex":["apiconstraints","applicationcontroller","applicationcontroller::activerecord","authenticable","exceptions","exceptions::applicationerror","exceptions::invalidoperation","exceptions::notfound","exceptions::unknownoperation","match","matchloader","matchplay","matchplay::completesetandmatch","matchplay::nextserver","matchplay::playactions","matchplay::removelastchange","matchplay::startnext","matchplay::wingame","matchplayer","matchset","matchvalidation","matchvalidation::validator","matchvalidation::validator::validatechangematch","player","setgame","team","user","v1","v1::applicationarrayserializer","v1::applicationserializer","v1::matchscoreboardcontroller","v1::matchscoreboardcontroller::exceptions","v1::matchscoreboardserializer","v1::matchserializer","v1::matchsetserializer","v1::matchescontroller","v1::playerserializer","v1::playerscontroller","v1::sessionserializer","v1::sessionscontroller","v1::setgameserializer","v1::teamserializer","v1::teamscontroller","v1::usercontroller","v1::userserializer","v1::matchscoreboardserializer#actions()","v1::matchserializer#attributes()","authenticable#authorize_user!()","matchplay::completesetandmatch#complete!()","match#completed?()","matchset#completed?()","match#compute_team_winner()","matchset#compute_team_winner()","matchplayer::convert_scores()","v1::matchescontroller#create()","v1::playerscontroller#create()","v1::sessionscontroller#create()","v1::teamscontroller#create()","authenticable#current_user()","v1::matchescontroller#destroy()","v1::playerscontroller#destroy()","v1::sessionscontroller#destroy()","v1::teamscontroller#destroy()","matchloader::eager_load_match()","match#first_player()","v1::matchserializer#first_player()","v1::teamserializer#first_player()","match#first_player=()","match#first_set()","v1::matchserializer#first_team()","matchplay::startnext#game()","matchplay::wingame#game()","matchplay::startnext#game?()","matchplay::wingame#game?()","v1::matchsetserializer#games()","user#generate_authentication_token!()","team#include_player?()","team#include_players?()","v1::matchescontroller#index()","v1::playerscontroller#index()","v1::teamscontroller#index()","matchset#last_game()","match#last_set()","matchplay::playactions#lookup_method()","matchplay::wingame#match_tiebreak()","matchplay::startnext#match_tiebreak?()","matchplay::wingame#match_tiebreak?()","apiconstraints#matches?()","match#max_sets_to_play()","match#min_sets_to_play()","match#near_team_winner?()","matchset#near_team_winner?()","v1::matchscoreboardserializer#near_winners()","apiconstraints::new()","matchplay::completesetandmatch::new()","matchplay::nextserver::new()","matchplay::playactions::new()","matchplay::removelastchange::new()","matchplay::startnext::new()","matchplay::wingame::new()","matchplayer::new()","matchvalidation::validator::new()","matchvalidation::validator::validatechangematch::new()","match#next_game_ordinal()","v1::matchserializer#opponent_id()","matchplayer::play()","matchplayer#play()","match#play_match!()","match#play_match?()","matchplay::nextserver#player()","matchplay::removelastchange#remove_last()","applicationcontroller#rescue_record_not_found()","matchset#score_changed()","match#scoring_of_set()","match#second_player()","v1::matchserializer#second_player()","v1::teamserializer#second_player()","match#second_player=()","v1::matchserializer#second_team()","v1::setgameserializer#server()","v1::matchscoreboardserializer#servers()","matchplay::startnext#set?()","v1::matchscoreboardserializer#sets()","match#sets_won()","v1::matchscoreboardcontroller#show()","v1::matchescontroller#show()","v1::playerscontroller#show()","v1::teamscontroller#show()","v1::usercontroller#show()","player#singles_team()","player#singles_team!()","matchplayer#start_first_game()","matchplayer#start_play()","matchplayer#start_set_game()","match#state()","matchset#state()","setgame#state()","match#team_of_player()","matchplay::startnext#tiebreak()","matchplay::wingame#tiebreak()","v1::setgameserializer#tiebreak()","matchplay::startnext#tiebreak?()","matchplay::wingame#tiebreak?()","matchset#tiebreak?()","setgame#tiebreak?()","matchset#tiebreak_game?()","match#tiebreak_set?()","v1::matchscoreboardcontroller#update()","v1::matchescontroller#update()","v1::playerscontroller#update()","v1::teamscontroller#update()","authenticable#user_signed_in?()","match#valid_actions()","matchplay::playactions#valid_actions()","matchvalidation::validate()","matchvalidation::validator#validate()","matchvalidation::validator::validatechangematch#validate()","matchset#win_threshold()","v1::matchserializer#winner()","v1::matchsetserializer#winner()","v1::setgameserializer#winner()","",""],"info":[["ApiConstraints","","ApiConstraints.html","","<p>Determine if a router request matches an api version number\n"],["ApplicationController","","ApplicationController.html","","<p>Base class for this application&#39;s controllers\n"],["ApplicationController::ActiveRecord","","ApplicationController/ActiveRecord.html","",""],["Authenticable","","Authenticable.html","","<p>Add authentication support to a controller\n"],["Exceptions","","Exceptions.html","","<p>Custom exception classes\n"],["Exceptions::ApplicationError","","Exceptions/ApplicationError.html","","<p>Base class for application exceptions\n"],["Exceptions::InvalidOperation","","Exceptions/InvalidOperation.html","","<p>Attempt to execute an operation that is not allowed at this time\n"],["Exceptions::NotFound","","Exceptions/NotFound.html","","<p>Could not find an object that was needed to perform an operation\n"],["Exceptions::UnknownOperation","","Exceptions/UnknownOperation.html","","<p>Attempt to execute an operation that is not recognized\n"],["Match","","Match.html","","<p>Model for a tennis match\n<p>Overview\n<p>A match may be a singles match or a doubles match\n"],["MatchLoader","","MatchLoader.html","","<p>Match loading for controllers\n"],["MatchPlay","","MatchPlay.html","","<p>Executes actions to play a match. Executes the &#39;:win_game&#39; action\nto win the current game in …\n"],["MatchPlay::CompleteSetAndMatch","","MatchPlay/CompleteSetAndMatch.html","","<p>Class to help with completing a set and the match. A set or the match may\nbe completed when there is …\n"],["MatchPlay::NextServer","","MatchPlay/NextServer.html","","<p>Class to determine which player serves next\n"],["MatchPlay::PlayActions","","MatchPlay/PlayActions.html","","<p>Class to help work with actions:\n<p>Indicate whether a particular action is enabled\n<p>Get a hash of all enabled …\n"],["MatchPlay::RemoveLastChange","","MatchPlay/RemoveLastChange.html","","<p>Class to remove the last scoring change.  Removing the last scoring change\nmay involve deleting games …\n"],["MatchPlay::StartNext","","MatchPlay/StartNext.html","","<p>Class to help with starting games, tiebreaks, sets, and match tiebreaks\n"],["MatchPlay::WinGame","","MatchPlay/WinGame.html","","<p>Class to help with winning games\n"],["MatchPlayer","","MatchPlayer.html","","<p>Class to help “play” a match.  This class is used to generate seed data and\ntest data.\n"],["MatchSet","","MatchSet.html","","<p>Model for a set in a match\n<p>Overview\n<p>A set belongs to a Match\n"],["MatchValidation","","MatchValidation.html","","<p>Validate changes to a Match\n"],["MatchValidation::Validator","","MatchValidation/Validator.html","","<p>Help validate the changes to match attributes\n"],["MatchValidation::Validator::ValidateChangeMatch","","MatchValidation/Validator/ValidateChangeMatch.html","","<p>Class to validate changes to a match after play has started. The match\nopponents may not be changed, …\n"],["Player","","Player.html","","<p>Model for a player\n<p>Overview\n<p>A player may be on a team\n"],["SetGame","","SetGame.html","","<p>Model for a game\n<p>Overview\n<p>A game belongs to a MatchSet\n"],["Team","","Team.html","","<p>Model for a team\n<p>Overview\n<p>A team may be an opponent in a match\n"],["User","","User.html","","<p>Model for a user\n<p>Overview\n<p>A user has a name, password and authentication token\n"],["V1","","V1.html","",""],["V1::ApplicationArraySerializer","","V1/ApplicationArraySerializer.html","","<p>Base class for this application&#39;s serializers. Disable JSON root object\n"],["V1::ApplicationSerializer","","V1/ApplicationSerializer.html","","<p>Base class for this application&#39;s serializers. Disable JSON root object\n"],["V1::MatchScoreboardController","","V1/MatchScoreboardController.html","","<p>Controller for match scoreboards\n<p>Renders a match with sets and games using V1::MatchScoreboardSerializer …\n"],["V1::MatchScoreboardController::Exceptions","","V1/MatchScoreboardController/Exceptions.html","",""],["V1::MatchScoreboardSerializer","","V1/MatchScoreboardSerializer.html","","<p>Serialize a Match score with the following information:\n<p>Attributes of the match (See V1::MatchSerializer …\n"],["V1::MatchSerializer","","V1/MatchSerializer.html","","<p>Serialize a Match with the following attributes:\n<p><code>:id</code>\n<p><code>:title</code>\n"],["V1::MatchSetSerializer","","V1/MatchSetSerializer.html","","<p>Serialize a MatchSet with the following attributes:\n<p><code>:scoring</code>\n<p><code>:state</code>\n"],["V1::MatchesController","","V1/MatchesController.html","","<p>Controller for matches\n<p>Renders a list of all matches\n<p>Renders one particular match\n"],["V1::PlayerSerializer","","V1/PlayerSerializer.html","","<p>Serializes a Player with the following attributes:\n<p><code>:id</code>\n<p><code>:name</code>\n"],["V1::PlayersController","","V1/PlayersController.html","","<p>Controller for players\n<p>Renders a list of all players\n<p>Renders one player\n"],["V1::SessionSerializer","","V1/SessionSerializer.html","","<p>Serializes a logged in User.  The following attributes are serialized:\n<p><code>:id</code>\n<p><code>:username</code>\n"],["V1::SessionsController","","V1/SessionsController.html","","<p>Controller for a user session\n<p>Validates credentials and returns user attributes\n<p>Regenerates the authentication …\n"],["V1::SetGameSerializer","","V1/SetGameSerializer.html","","<p>Serializes a SetGame with the following attributes:\n<p><code>:winner</code> - Id of a Team or a Player\n<p><code>:server</code> - Id of …\n"],["V1::TeamSerializer","","V1/TeamSerializer.html","","<p>Serializes a Team with the following attributes:\n<p><code>:id</code>\n<p><code>:first_player</code>\n"],["V1::TeamsController","","V1/TeamsController.html","","<p>Controller for teams\n<p>Renders a list of all teams\n<p>Renders a particular team\n"],["V1::UserController","","V1/UserController.html","","<p>Controller for the current user\n<p>Renders the current user using V1::UserSerializer. The current user is …\n"],["V1::UserSerializer","","V1/UserSerializer.html","","<p>Serializes the current User with the following attributes:\n<p><code>:id</code>\n<p><code>:username</code>\n"],["actions","V1::MatchScoreboardSerializer","V1/MatchScoreboardSerializer.html#method-i-actions","()","<p>Serialize actions that may be executed on the match. See\nMatch.valid_actions\n<p><strong>Returns</strong> : Hash\n\n<p>Example\n"],["attributes","V1::MatchSerializer","V1/MatchSerializer.html#method-i-attributes","()","<p>Indicate dynamic attributes to the serializer.  For a doubles match,\nserialize first and second players. …\n"],["authorize_user!","Authenticable","Authenticable.html#method-i-authorize_user-21","()","<p>Check for a current user.  If not, render an error. Overrides devise\nimplementation.\n"],["complete!","MatchPlay::CompleteSetAndMatch","MatchPlay/CompleteSetAndMatch.html#method-i-complete-21","()","<p>Complete the current set if enough games have been won. Then, complete the\nmatch if enough sets have …\n"],["completed?","Match","Match.html#method-i-completed-3F","()","<p>Indicate if the match is completed.\n"],["completed?","MatchSet","MatchSet.html#method-i-completed-3F","()","<p>Indicate whether the match has a winner\n<p><strong>Returns</strong> : Boolean\n\n"],["compute_team_winner","Match","Match.html#method-i-compute_team_winner","()","<p>Compute the winner of the match based on the number of sets won by each\nopponent\n<p><strong>Returns</strong> : Team or nil …\n\n"],["compute_team_winner","MatchSet","MatchSet.html#method-i-compute_team_winner","()","<p>Compute the winner of the set, if any, based on the games won and the\nscoring kind\n<p><strong>Returns</strong> : Team or nil …\n\n"],["convert_scores","MatchPlayer","MatchPlayer.html#method-c-convert_scores","(scores)","<p>Convert an array of numeric scores into an array of character scores. This\nmethod is convenient for creating …\n"],["create","V1::MatchesController","V1/MatchesController.html#method-i-create","()","<p>Create a match\n<p><strong>Request</strong>\n<p><code>:title</code> - match title\n"],["create","V1::PlayersController","V1/PlayersController.html#method-i-create","()","<p>Create a player\n<p><strong>Request</strong>\n<p><code>:name</code> - player name\n"],["create","V1::SessionsController","V1/SessionsController.html#method-i-create","()","<p>Login a user Validate user credentials.  If valid, respond with an\nauthentication token for the user. …\n"],["create","V1::TeamsController","V1/TeamsController.html#method-i-create","()","<p>Create a team\n<p><strong>Request</strong>\n<p><code>:name</code> - team name\n"],["current_user","Authenticable","Authenticable.html#method-i-current_user","()","<p>Get user associated with auth token. Overrides devise implementation.\n<p><strong>Returns</strong> :\n<p>User\n"],["destroy","V1::MatchesController","V1/MatchesController.html#method-i-destroy","()","<p>Delete a match\n<p><strong>Params</strong>\n<p><code>:id</code> - id of a Match\n"],["destroy","V1::PlayersController","V1/PlayersController.html#method-i-destroy","()","<p>Delete a player A player in a match or on a team may not be deleted.\n<p><strong>Params</strong>\n<p><code>:id</code> - player id\n"],["destroy","V1::SessionsController","V1/SessionsController.html#method-i-destroy","()","<p>Clear the authentication token associated with a user\n<p><strong>Params</strong>\n<p><code>:id</code> - authentication token\n"],["destroy","V1::TeamsController","V1/TeamsController.html#method-i-destroy","()","<p>Delete a team A team in a match may not be deleted\n<p><strong>Params</strong>\n<p><code>:id</code> - team id\n"],["eager_load_match","MatchLoader","MatchLoader.html#method-c-eager_load_match","(match_id)","<p>Load match, sets, games, teams and players at once.\n<p><strong>Args</strong>    :\n<p><code>match_id</code> -&gt; Id of Match\n"],["first_player","Match","Match.html#method-i-first_player","()","<p>Get the first player opponent in a singles match\n<p><strong>Returns</strong> : Player\n\n"],["first_player","V1::MatchSerializer","V1/MatchSerializer.html#method-i-first_player","()","<p>Serialize the first player\n<p><strong>Returns</strong> : V1::PlayerSerializer\n\n"],["first_player","V1::TeamSerializer","V1/TeamSerializer.html#method-i-first_player","()","<p>Serialize the first player on the team\n<p><strong>Returns</strong> : V1::PlayerSerializer\n\n"],["first_player=","Match","Match.html#method-i-first_player-3D","(player)","<p>Set the first player opponent in a singles match. A new team may be created\nto hold the player\n"],["first_set","Match","Match.html#method-i-first_set","()","<p>Get the first set of the match\n<p><strong>Returns</strong> : MatchSet\n\n"],["first_team","V1::MatchSerializer","V1/MatchSerializer.html#method-i-first_team","()","<p>Serialize the first team\n<p><strong>Returns</strong> : V1::TeamSerializer\n\n"],["game","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-game","()","<p>Start the next game\n"],["game","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-game","(team)","<p>Win a normal game\n"],["game?","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-game-3F","()","<p>Indicate if a game can be started\n"],["game?","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-game-3F","()","<p>Indicate if a game can be won (a game is in progress)\n"],["games","V1::MatchSetSerializer","V1/MatchSetSerializer.html#method-i-games","()","<p>Serialize the games of the set.\n<p><strong>Returns</strong> :\n<p>array of V1::SetGameSerializer\n"],["generate_authentication_token!","User","User.html#method-i-generate_authentication_token-21","()","<p>Set auth_token attribute to a new value\n"],["include_player?","Team","Team.html#method-i-include_player-3F","(player)","<p>Indicate whether the team includes a particular player\n<p><strong>Args</strong>    :\n<p><code>player</code> -&gt; Player\n"],["include_players?","Team","Team.html#method-i-include_players-3F","(players)","<p>Indicate whether the team includes all players in a list\n<p><strong>Args</strong>    :\n<p><code>players</code> -&gt; array of players\n"],["index","V1::MatchesController","V1/MatchesController.html#method-i-index","()","<p>Get a list of all matches, sorted by match title\n<p><strong>Response</strong>\n<p>Serialized array of matches\n"],["index","V1::PlayersController","V1/PlayersController.html#method-i-index","()","<p>Get a list of all players, sorted by player name\n<p><strong>Response</strong>\n<p>serialized array of players\n"],["index","V1::TeamsController","V1/TeamsController.html#method-i-index","()","<p>Get a list of all doubles teams, sorted by team name. Singles teams are for\ninternal use so are not shown …\n"],["last_game","MatchSet","MatchSet.html#method-i-last_game","()","<p>Get the last game of the set\n<p><strong>Returns</strong> : Game\n\n"],["last_set","Match","Match.html#method-i-last_set","()","<p>Get the last set of the match\n<p><strong>Returns</strong> : MatchSet\n\n"],["lookup_method","MatchPlay::PlayActions","MatchPlay/PlayActions.html#method-i-lookup_method","(action)","<p>Lookup the methods to handle a particular action\n<p><strong>Args</strong>    :\n<p><code>action</code> -&gt; <code>:win_game</code>, <code>:start_game</code>\netc.\n"],["match_tiebreak","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-match_tiebreak","(team)","<p>Win a tiebreak game in a match tiebreaker\n"],["match_tiebreak?","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-match_tiebreak-3F","()","<p>Indicate if the match tiebreak set can be started\n"],["match_tiebreak?","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-match_tiebreak-3F","()","<p>Indicate if a match tiebreak game can be completed (a match tiebreak is in\nprogress)\n"],["matches?","ApiConstraints","ApiConstraints.html#method-i-matches-3F","(request)","<p>Determine whether a request matches an api version number\n<p><strong>Args</strong>    :\n<p><code>request</code> -&gt; router request\n"],["max_sets_to_play","Match","Match.html#method-i-max_sets_to_play","()","<p>Get the maximum number of sets that will be played in this match. The\nmaximum is 3 for <code>:three_six_game</code> …\n"],["min_sets_to_play","Match","Match.html#method-i-min_sets_to_play","()","<p>Get the minimum number of sets that will be played in this match The\nminimum is 2 for <code>:three_six_game</code> …\n"],["near_team_winner?","Match","Match.html#method-i-near_team_winner-3F","(team)","<p>Determine whether a Team can win the match by winning one more game\n<p><strong>Args</strong>    :\n<p><code>team</code> -&gt; Team\n"],["near_team_winner?","MatchSet","MatchSet.html#method-i-near_team_winner-3F","(team)","<p>Indicate whether a team can win the set if the team wins one more game\n<p><strong>Args</strong>    :\n<p><code>team</code> -&gt; Team\n"],["near_winners","V1::MatchScoreboardSerializer","V1/MatchScoreboardSerializer.html#method-i-near_winners","()","<p>Serialize the id&#39;s of teams or players that are near to winning a set\nor the match.  Player id&#39;s …\n"],["new","ApiConstraints","ApiConstraints.html#method-c-new","(options)","<p><strong>Args</strong>    : options\n<p><code>version</code> -&gt; number\n<p>Version number to match\n"],["new","MatchPlay::CompleteSetAndMatch","MatchPlay/CompleteSetAndMatch.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlay::NextServer","MatchPlay/NextServer.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlay::PlayActions","MatchPlay/PlayActions.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlay::RemoveLastChange","MatchPlay/RemoveLastChange.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlay::StartNext","MatchPlay/StartNext.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlay::WinGame","MatchPlay/WinGame.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchPlayer","MatchPlayer.html#method-c-new","(match)","<p><strong>Args</strong>    :\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchValidation::Validator","MatchValidation/Validator.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["new","MatchValidation::Validator::ValidateChangeMatch","MatchValidation/Validator/ValidateChangeMatch.html#method-c-new","(match)","<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n\n\n"],["next_game_ordinal","Match","Match.html#method-i-next_game_ordinal","()","<p>Get the ordinal of the next game to play in the match. The lowest ordinal\nis 1.\n<p><strong>Returns</strong> : Integer\n\n"],["opponent_id","V1::MatchSerializer","V1/MatchSerializer.html#method-i-opponent_id","(team)","<p>Get the id for an opponent in a match. For a doubles match, get a team id. \nFor a singles match, get …\n"],["play","MatchPlayer","MatchPlayer.html#method-c-play","(match, scores)","<p>Class method to play a match. Calls #play\n<p><strong>Args</strong>    :\n<p><code>match</code> -&gt; Match\n"],["play","MatchPlayer","MatchPlayer.html#method-i-play","(scores)","<p>Play a match\n<p><strong>Args</strong>    :\n<p><code>scores</code> -&gt; array of set scores\n"],["play_match!","Match","Match.html#method-i-play_match-21","(action, params = nil)","<p>Execute an action on the match, such as <code>:win_game</code>\n<p><strong>Args</strong>    :\n<p><code>action</code> -&gt; the action to execute\n"],["play_match?","Match","Match.html#method-i-play_match-3F","(action)","<p>Indicate if an action can be executed. <code>:win_game</code> can be\nexecuted if a game has started, for example. …\n"],["player","MatchPlay::NextServer","MatchPlay/NextServer.html#method-i-player","()","<p>Determine the serving player.  In a singles match, serving alternates\nbetween the two opponent players. …\n"],["remove_last","MatchPlay::RemoveLastChange","MatchPlay/RemoveLastChange.html#method-i-remove_last","()","<p>Execute <code>:remove_last_change</code> action by updating and/or deleting\nentities.\n"],["rescue_record_not_found","ApplicationController","ApplicationController.html#method-i-rescue_record_not_found","()","<p>Render an HTTP error on ActiveRecord::RecordNotFound\n"],["score_changed","MatchSet","MatchSet.html#method-i-score_changed","()","<p>Clear cached scores.  For internal use\n"],["scoring_of_set","Match","Match.html#method-i-scoring_of_set","(ordinal)","<p>Get the scoring of a set\n<p><strong>Args</strong>    :\n<p><code>ordinal</code> -&gt; set ordinal\n"],["second_player","Match","Match.html#method-i-second_player","()","<p>Get the second player opponent in a singles match\n<p><strong>Returns</strong> : Player\n\n"],["second_player","V1::MatchSerializer","V1/MatchSerializer.html#method-i-second_player","()","<p>Serialize the second player\n<p><strong>Returns</strong> : See V1::PlayerSerializer\n\n"],["second_player","V1::TeamSerializer","V1/TeamSerializer.html#method-i-second_player","()","<p>Serialize the second player on the team\n<p><strong>Returns</strong> : V1::PlayerSerializer\n\n"],["second_player=","Match","Match.html#method-i-second_player-3D","(player)","<p>Set the second player opponent in a singles match. A new team may be\ncreated to hold the player\n"],["second_team","V1::MatchSerializer","V1/MatchSerializer.html#method-i-second_team","()","<p>Serialize the second team.  See V1::OpponentTeamSerializer.\n<p><strong>Returns</strong> : V1::TeamSerializer\n\n"],["server","V1::SetGameSerializer","V1/SetGameSerializer.html#method-i-server","()","<p>Serialize the Player id of the game server.\n<p><strong>Returns</strong> : Player id or nil\n\n"],["servers","V1::MatchScoreboardSerializer","V1/MatchScoreboardSerializer.html#method-i-servers","()","<p>Serialize a list of player id&#39;s that may serve the first or second\ngame. (One of these players must …\n"],["set?","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-set-3F","()","<p>Indicate if a set can be started\n"],["sets","V1::MatchScoreboardSerializer","V1/MatchScoreboardSerializer.html#method-i-sets","()","<p>Serialize the sets of the match. See V1::MatchSetSerializer\n<p><strong>Returns</strong> :\n<p>array of serialized sets\n"],["sets_won","Match","Match.html#method-i-sets_won","(team)","<p>Calculate the number of sets won by a team\n<p><strong>Args</strong>    :\n<p><code>team</code> -&gt; Team\n"],["show","V1::MatchScoreboardController","V1/MatchScoreboardController.html#method-i-show","()","<p>Render the match score\n<p><strong>Params</strong>\n<p><code>:id</code> - id of a Match\n"],["show","V1::MatchesController","V1/MatchesController.html#method-i-show","()","<p>Get a particular match\n<p><strong>Params</strong>\n<p><code>:id</code> - id of a Match\n"],["show","V1::PlayersController","V1/PlayersController.html#method-i-show","()","<p>Get a particular player\n<p><strong>Params</strong>\n<p><code>:id</code> - player id\n"],["show","V1::TeamsController","V1/TeamsController.html#method-i-show","()","<p>Get a particular team\n<p><strong>Params</strong>\n<p><code>:id</code> - team id\n"],["show","V1::UserController","V1/UserController.html#method-i-show","()","<p>Get the current user\n<p><strong>Response</strong>\n<p>serialized User\n"],["singles_team","Player","Player.html#method-i-singles_team","()","<p>Find the singles team associated with this player\n<p><strong>Returns</strong> : Team or nil\n\n"],["singles_team!","Player","Player.html#method-i-singles_team-21","()","<p>Force a player to have an associated singles team.  Creates a new Team if\nneeded.\n<p><strong>Returns</strong> : Team\n\n"],["start_first_game","MatchPlayer","MatchPlayer.html#method-i-start_first_game","()","<p>Start the match and start the first game by executing the\n<code>:start_play</code> and <code>:start_game</code> actions\n"],["start_play","MatchPlayer","MatchPlayer.html#method-i-start_play","()","<p>Start the match by executing the <code>:start_play</code> action\n"],["start_set_game","MatchPlayer","MatchPlayer.html#method-i-start_set_game","()","<p>Start the next set by executing the <code>:start_set</code> action\n"],["state","Match","Match.html#method-i-state","()","<p>Get the state of the match\n<p>:complete\n<p>:in_progress\n"],["state","MatchSet","MatchSet.html#method-i-state","()","<p>Get the state of the match\n<p><strong>Returns</strong> : state\n<p><code>:in_progress</code>\n"],["state","SetGame","SetGame.html#method-i-state","()","<p>Get the state of a game\n<p><strong>Returns</strong> : symbol\n<p><code>:in_progress</code> or\n"],["team_of_player","Match","Match.html#method-i-team_of_player","(player)","<p>Get the opponent team that includes a particular player\n<p><strong>Args</strong>    :\n<p><code>player</code> -&gt; Player\n"],["tiebreak","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-tiebreak","()","<p>Start the next tiebreak game\n"],["tiebreak","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-tiebreak","(team)","<p>Win a tiebreak game at the end of a set\n"],["tiebreak","V1::SetGameSerializer","V1/SetGameSerializer.html#method-i-tiebreak","()","<p>Indicate a tiebreak game\n<p><strong>Returns</strong> : true or nil\n\n"],["tiebreak?","MatchPlay::StartNext","MatchPlay/StartNext.html#method-i-tiebreak-3F","()","<p>Indicate if a tiebreak game can be started\n"],["tiebreak?","MatchPlay::WinGame","MatchPlay/WinGame.html#method-i-tiebreak-3F","()","<p>Indicate if a tiebreak game can be won (a tiebreak game is in progress).\n"],["tiebreak?","MatchSet","MatchSet.html#method-i-tiebreak-3F","()","<p>Indicate if this set is a match tiebreak\n<p><strong>Returns</strong> : Boolean\n\n"],["tiebreak?","SetGame","SetGame.html#method-i-tiebreak-3F","()","<p>Indicate if the game is a tiebreak\n<p><strong>Returns</strong> : Boolean\n\n"],["tiebreak_game?","MatchSet","MatchSet.html#method-i-tiebreak_game-3F","(game_ordinal)","<p>Indicate whether a particular game is a tiebreak. A game may be a tiebreak\nbecause the set is tied (e.g. …\n"],["tiebreak_set?","Match","Match.html#method-i-tiebreak_set-3F","(ordinal)","<p>Indicate whether a set is a match tiebreak\n<p><strong>Args</strong>    :\n<p><code>ordinal</code> -&gt; Integer\n"],["update","V1::MatchScoreboardController","V1/MatchScoreboardController.html#method-i-update","()","<p>Execute an action by calling Match.play_match!\n<p><strong>Params</strong>\n<p><code>:action</code> - action such as <code>:win_game</code>\n"],["update","V1::MatchesController","V1/MatchesController.html#method-i-update","()","<p>Update a match\n<p><strong>Params</strong>\n<p><code>:id</code> - id of a Match\n"],["update","V1::PlayersController","V1/PlayersController.html#method-i-update","()","<p>Update a player\n<p><strong>Params</strong>\n<p><code>:id</code> - player id\n"],["update","V1::TeamsController","V1/TeamsController.html#method-i-update","()","<p>Update a team\n<p><strong>Params</strong>\n<p><code>:id</code> - team id\n"],["user_signed_in?","Authenticable","Authenticable.html#method-i-user_signed_in-3F","()","<p>Check for a current user. Overrides device implementation.\n"],["valid_actions","Match","Match.html#method-i-valid_actions","()","<p>Generate a hash of valid actions\n<p><strong>Returns</strong> : Hash\n\n<p>Example\n"],["valid_actions","MatchPlay::PlayActions","MatchPlay/PlayActions.html#method-i-valid_actions","()","<p>Generate a hash of valid actions\n<p><strong>Returns</strong> : Hash\n\n<p>Example\n"],["validate","MatchValidation","MatchValidation.html#method-c-validate","(match, errors)","<p>Help validate the changes to match attributes\n<p><strong>Args</strong>\n<p><code>match</code> -&gt; Match\n"],["validate","MatchValidation::Validator","MatchValidation/Validator.html#method-i-validate","(errors)","<p>Check for various error conditions:\n<p>Both opponents may not be the same team or player\n<p>The server of the …\n"],["validate","MatchValidation::Validator::ValidateChangeMatch","MatchValidation/Validator/ValidateChangeMatch.html#method-i-validate","(errors)","<p>Check for invalid changes to the match.  Add error messages to a hash.\n<p><strong>Args</strong>\n<p><code>errors</code> -&gt; hash\n"],["win_threshold","MatchSet","MatchSet.html#method-i-win_threshold","()","<p>Get the minimum number of games that an opponent must win in order to win\nthe set, based on the scoring …\n"],["winner","V1::MatchSerializer","V1/MatchSerializer.html#method-i-winner","()","<p>Serialize the player or team id of the match winner, if any.\n<p><strong>Returns</strong> : id\n\n"],["winner","V1::MatchSetSerializer","V1/MatchSetSerializer.html#method-i-winner","()","<p>Serialize the Player or Team id of the winner\n<p><strong>Returns</strong> : Player id or Team id or nil\n\n"],["winner","V1::SetGameSerializer","V1/SetGameSerializer.html#method-i-winner","()","<p>Serialize the Player or Team id of the game winner\n<p><strong>Returns</strong> : Team id or Player id or nil\n\n"],["rspec_report.rake","","lib/tasks/rspec_report_rake.html","","<p>unless Rails.env.production?\n\n<pre>require &#39;rspec/core/rake_task&#39;\n\nRSpec::Core::RakeTask.new(:spec) do |t|\n ...</pre>\n"],["sample_data.rake","","lib/tasks/sample_data_rake.html","","<p>require &#39;match_player&#39;\n<p># Tasks to manage tennis sample data namespace :db do\n\n<pre>desc &#39;Clears data ...</pre>\n"]]}}